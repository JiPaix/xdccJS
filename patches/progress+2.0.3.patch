diff --git a/node_modules/progress/lib/node-progress.js b/node_modules/progress/lib/node-progress.js
index 8eb0740..8ad8353 100644
--- a/node_modules/progress/lib/node-progress.js
+++ b/node_modules/progress/lib/node-progress.js
@@ -145,7 +145,7 @@ ProgressBar.prototype.render = function (tokens, force) {
     .replace(':eta', (isNaN(eta) || !isFinite(eta)) ? '0.0' : (eta / 1000)
       .toFixed(1))
     .replace(':percent', percent.toFixed(0) + '%')
-    .replace(':rate', Math.round(rate));
+    .replace(':rate', humanFileSize(rate, true));
 
   /* compute the available space (non-zero) for the bar */
   var availableSpace = Math.max(0, this.stream.columns - str.replace(':bar', '').length);
@@ -234,3 +234,25 @@ ProgressBar.prototype.terminate = function () {
     this.stream.write('\n');
   }
 };
+
+function humanFileSize(bytes, si=false, dp=1) {
+  const thresh = si ? 1000 : 1024;
+
+  if (Math.abs(bytes) < thresh) {
+    return bytes + ' B';
+  }
+
+  const units = si 
+    ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'] 
+    : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];
+  let u = -1;
+  const r = 10**dp;
+
+  do {
+    bytes /= thresh;
+    ++u;
+  } while (Math.round(Math.abs(bytes) * r) / r >= thresh && u < units.length - 1);
+
+
+  return bytes.toFixed(dp) + ' ' + units[u];
+}
\ No newline at end of file
